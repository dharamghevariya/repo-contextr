[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "repo-contextr"
version = "0.1.0"
description = "A powerful Repository Context Packager CLI tool for LLMs"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Dharam Ghevariya", email = "dharamghevariya36@gmail.com"}
]
keywords = ["cli", "git", "repository", "context", "llm", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: Utilities",
]
requires-python = ">=3.12"
dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
]

[project.urls]
Homepage = "https://github.com/dharamghevariya/repo-contextr"
Repository = "https://github.com/dharamghevariya/repo-contextr"
Issues = "https://github.com/dharamghevariya/repo-contextr/issues"

[project.scripts]
repo-contextr = "contextr.cli:app"

[tool.hatch.build.targets.wheel]
packages = ["src/contextr"]

[dependency-groups]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.17.1",
    "pytest>=8.4.2",
    "pre-commit>=4.0.0",
    "pytest-cov>=6.0.0",
]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src"]
exclude = [
    ".git",
    "__pycache__",
    "*.pyc",
    ".venv",
    "venv",
    "dist",
    "build",
    "*.egg-info",
    "README.md",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "B",   # flake8-bugbear (common bugs)
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade (modern Python syntax)
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib (prefer pathlib over os.path)
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "PTH123", # pathlib open() - we use open() with pathlib which is fine
    "B008",  # function call in argument defaults - required for Typer CLI
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # unused imports OK in __init__.py
"src/tests/*.py" = ["S101", "SIM117"]  # allow assert in tests, allow nested with

[tool.ruff.lint.isort]
known-first-party = ["contextr"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
